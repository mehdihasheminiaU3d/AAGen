using System;
using System.IO;
using UnityEditor;
using UnityEngine;

namespace AAGen.Editor.DependencyGraph
{
    public static class DependencyGraphSettings
    {
        [SettingsProvider]
        private static SettingsProvider CreateSettingsProvider()
        {
            return new SettingsProvider($"Project/Dependency Graph", SettingsScope.Project)
            {
                guiHandler = OnGui,
                keywords = new[] { "dependency, graph" }
            };
        }

        private const string StyleName = "box";

        const string DebugInfo =
            "If unchecked, all files generated by the dependency graph system will include only the asset GUID for optimization purposes.\n" +
            "If checked, the files will also serialize the asset path, which can assist with debugging.";

        private static EditorPersistentValue<float> _targetEditorFrameTime = CreateTargetEditorFrameTimeValue();
        private static EditorPersistentValue<int> _majorChangeThreshold = CreateMajorChangeThresholdValue();
        private static EditorPersistentValue<bool> _debugMode = CreateDebugModeValue();
        private static EditorPersistentValue<string> _debugRootFolder = CreateDebugRootFolderValue();

        public static int MajorChangeThreshold => _majorChangeThreshold.Value;
        public static float TargetEditorFrameTime => _targetEditorFrameTime.Value;
        public static bool DebugMode => _debugMode.Value;
        public static string DebugRootFolder => _debugRootFolder.Value;

        private static void OnGui(string search)
        {
            _majorChangeThreshold.Value =
                Mathf.Max(EditorGUILayout.IntField("Major Change Threshold", _majorChangeThreshold.Value), 5);
            _targetEditorFrameTime.Value =
                Mathf.Max(EditorGUILayout.FloatField("Target Editor Frame Time", _targetEditorFrameTime.Value), 0f);

            if (GUILayout.Button("Reset to defaults"))
                ResetToDefault();

            GUILayout.Space(10);
            EditorGUILayout.LabelField("File Path:", DependencyGraphConstants.DependencyGraphFilePath);
            if (GUILayout.Button("Delete File"))
            {
                DeleteFiles();
            }

            if (GUILayout.Button("Locate Files"))
            {
                LocateFolder(DependencyGraphConstants.FolderPath);
            }

            GUILayout.Space(20);
            GUILayout.Label("Debug Settings", EditorStyles.boldLabel);

            GUILayout.BeginVertical(StyleName);
            EditorGUILayout.HelpBox(DebugInfo, MessageType.Info);
            _debugMode.Value = EditorGUILayout.Toggle("Debug Serialization", _debugMode.Value);
            _debugRootFolder.Value = EditorGUILayout.TextField("Root Folder", _debugRootFolder.Value);

            GUILayout.EndVertical();
        }

        #region Factory Methods

        private static EditorPersistentValue<float> CreateTargetEditorFrameTimeValue() =>
            new(0.03f, "EPK_TargetEditorFrameTime");

        private static EditorPersistentValue<int> CreateMajorChangeThresholdValue() =>
            new(25, "EPK_MajorChangeThreshold");

        private static EditorPersistentValue<bool> CreateDebugModeValue() => new(false, "EPK_DebugCache");

        private static EditorPersistentValue<string> CreateDebugRootFolderValue() =>
            new(null, "EPK_DebugRootFolder", ValidateDebugRootFolder);

        #endregion

        #region Button Handlers

        private static void ResetToDefault()
        {
            bool confirmed = EditorUtility.DisplayDialog(
                "Confirm Reset Settings",
                "Are you sure you want to reset settings? This action cannot be undone.",
                "Yes",
                "No"
            );

            if (!confirmed)
                return;

            _majorChangeThreshold.ClearPersistentData();
            _debugMode.ClearPersistentData();
            _targetEditorFrameTime.ClearPersistentData();

            _targetEditorFrameTime = CreateTargetEditorFrameTimeValue();
            _majorChangeThreshold = CreateMajorChangeThresholdValue();
            _debugMode = CreateDebugModeValue();
        }

        private static void DeleteFiles()
        {
            bool confirm = EditorUtility.DisplayDialog(
                "Confirm Deletion",
                "Are you sure you want to delete this file? This action cannot be undone.",
                "Delete",
                "Cancel"
            );

            if (confirm)
            {
                try
                {
                    if (File.Exists(DependencyGraphConstants.DependencyGraphFilePath))
                        File.Delete(DependencyGraphConstants.DependencyGraphFilePath);
                }
                catch
                {
                    Debug.Log("Failed to delete the file");
                }
            }
        }

        #endregion

        #region Settings Change Callback

        private static void ValidateDebugRootFolder()
        {
            _debugRootFolder.Value = ValidateDirectory(_debugRootFolder.Value);
        }

        #endregion

        #region Util

        private static string ValidateDirectory(string path)
        {
            return AssetDatabase.IsValidFolder(path) ? path : null;
        }

        /// <summary>
        /// Opens the folder in Explorer (Windows) or Finder (Mac).
        /// </summary>
        /// <param name="path">The folder path to open.</param>
        static void LocateFolder(string path)
        {
            if (string.IsNullOrEmpty(path))
                return;

            string fullPath = Path.GetFullPath(path);

            if (!Directory.Exists(fullPath))
                return;

            try
            {
#if UNITY_EDITOR_WIN
                System.Diagnostics.Process.Start("explorer.exe", $"/select,\"{fullPath}\"");
#elif UNITY_EDITOR_OSX
        System.Diagnostics.Process.Start("open", fullPath);
#else
        Debug.LogWarning("This feature is not supported on your platform.");
#endif
            }
            catch (Exception e)
            {
                Debug.Log($"{e.Message}");
            }
        }

        #endregion
    }
}
